{"version":3,"sources":["../../src/js/Board.js"],"names":["Board","mode","squares","initDebugBoard","initSquares","rowIndex","row","cellIndex","push","symbols","symbolOwner","hasOwnProperty","currentSymbol","length","colIndex","square","cell","blankSquares","symbol","newBoard","setSquare","horizontalLine","returnString","i","j","getSquare"],"mappings":"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","file":"Board.js","sourcesContent":["class Board {\n\n    constructor(mode) {\n        this.squares = [];\n        if (mode == \"DEBUG\") {\n            this.initDebugBoard();\n        } else {\n            this.initSquares();\n        }\n    }\n\n    initSquares() {\n        this.squares = [];\n        for (let rowIndex = 0; rowIndex < 3; rowIndex++) {\n            let row = [];\n            for (let cellIndex = 0; cellIndex < 3; cellIndex++) {\n                row.push(symbols[\"blank\"]);\n            }\n            this.squares.push(row);\n        }\n    }\n\n    initDebugBoard() {\n        this.squares = [\n            [symbols[\"player\"],     symbols[\"blank\"],   symbols[\"computer\"]],\n            [symbols[\"computer\"],   symbols[\"blank\"],   symbols[\"blank\"]],\n            [symbols[\"computer\"],   symbols[\"player\"],  symbols[\"player\"]]\n        ]\n    }\n\n    getGameState() {\n        for (const symbolOwner in symbols) {\n            if (symbols.hasOwnProperty(symbolOwner)) {\n                const currentSymbol = symbols[symbolOwner];\n                if (currentSymbol == \"blank\") {\n                    continue;\n                }\n                // Check rows\n                for (let rowIndex = 0; rowIndex < this.squares.length; rowIndex++) {\n                    const row = this.squares[rowIndex];\n                    if (row[0] == currentSymbol && row[1] == currentSymbol && row[2] == currentSymbol) {\n                        return currentSymbol;\n                    }\n                }\n                // Check cols\n                for (let colIndex = 0; colIndex < this.squares[0].length; colIndex++) {\n                    if (this.squares[0][colIndex] == currentSymbol && this.squares[1][colIndex] == currentSymbol && this.squares[2][colIndex] == currentSymbol) {\n                        return currentSymbol;\n                    }\n                }\n                // Check top left diag\n                if (this.squares[0][0] == currentSymbol && this.squares[1][1] == currentSymbol && this.squares[2][2] == currentSymbol) {\n                    return currentSymbol;\n                }\n                // Check bottom left diag\n                if (this.squares[2][0] == currentSymbol && this.squares[1][1] == currentSymbol && this.squares[0][2] == currentSymbol) {\n                    return currentSymbol;\n                }\n            }\n        }\n        return symbols[\"blank\"];\n    }\n    \n    setSquare(square, row, cell) {\n        this.squares[row][cell] = square;\n    }\n    \n    getSquare(row, cell) {\n        return this.squares[row][cell];\n    }\n\n    getBlankSquares() {\n        let blankSquares = [];\n        for (let rowIndex = 0; rowIndex < this.squares.length; rowIndex++) {\n            for (let cellIndex = 0; cellIndex < this.squares[rowIndex].length; cellIndex++) {\n                if (this.squares[rowIndex][cellIndex] == symbols[\"blank\"]) {\n                    blankSquares.push({row: rowIndex, cell: cellIndex});\n                }\n            }\n        }\n        return blankSquares;\n    }\n\n    copyWithMove(symbol, row, cell) {\n        let newBoard = new Board();\n        for (let rowIndex = 0; rowIndex < this.squares.length; rowIndex++) {\n            for (let cellIndex = 0; cellIndex < this.squares.length; cellIndex++) {\n                newBoard.setSquare(this.squares[rowIndex][cellIndex], rowIndex, cellIndex);\n            }\n        }\n        newBoard.setSquare(symbol, row, cell);\n        return newBoard;\n    }\n\n    toString() {\n        let horizontalLine = \"-------------\\n\";\n\t\tlet returnString = \"\\n    1   2   3\\n  \" + horizontalLine;\n\t\t/*\n\t\t *     1   2   3\n\t\t *   -------------\n\t\t * 1 | - | - | - |\n\t\t *   -------------\n\t\t * 2 | - | - | - |\n\t\t *   -------------\n\t\t * 3 | - | - | - |\n\t\t *   -------------\n\t\t * \n         */\n\t\tfor (let i = 0; i < this.squares.length; i++) {\n\t\t\treturnString += (i+1) + \" |\";\n\t\t\tfor (let j = 0; j < this.squares[i].length; j++) {\n\t\t\t\treturnString += \" \" + this.getSquare(j, i) + \" |\"; \n\t\t\t}\n\t\t\treturnString += \"\\n  \" + horizontalLine;\n\t\t}\n\t\treturn returnString;\n    }\n}"]}